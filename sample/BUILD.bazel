# SPDX-License-Identifier: Apache-2.0

# Sample BUILD file
# This example shows how to use the dslx_library and dslx_test rules

load("@bazel_skylib//rules:build_test.bzl", "build_test")
load("@bazel_skylib//rules:diff_test.bzl", "diff_test")
load(
    "//:rules.bzl",
    "dslx_fmt_test",
    "dslx_library",
    "dslx_prove_quickcheck_test",
    "dslx_test",
    "dslx_to_ir",
    "dslx_to_pipeline",
    "dslx_to_sv_types",
    "ir_prove_equiv_test",
    "ir_to_delay_info",
    "ir_to_gates",
    "mangle_dslx_name",
    "dslx_stitch_pipeline",
)

dslx_library(
    name = "imported",
    srcs = ["imported.x"],
)

dslx_test(
    name = "imported_test",
    deps = [":imported"],
)

dslx_to_sv_types(
    name = "imported_pkg",
    deps = [":imported"],
)

diff_test(
    name = "imported_pkg_test",
    file1 = ":imported_pkg",
    file2 = ":imported_pkg.golden.sv",
)

dslx_library(
    name = "sample",
    srcs = ["sample.x"],
    deps = [":imported"],
)

dslx_to_ir(
    name = "sample_ir",
    lib = ":sample",
    top = "main",
)

build_test(
    name = "sample_ir_test",
    targets = [":sample_ir"],
)

# Prove the unoptimized and optimized IRs are equivalent.
ir_prove_equiv_test(
    name = "sample_ir_prove_equiv_test",
    lhs = ":sample_ir.ir",
    rhs = ":sample_ir.opt.ir",
    top = mangle_dslx_name("sample", "main"),
)

ir_to_delay_info(
    name = "sample_delay_info",
    delay_model = "asap7",
    ir = ":sample_ir",
    top = mangle_dslx_name("sample", "main"),
    # Use the unoptimized IR file just to show a non-trivial path.
    use_unopt_ir = True,
)

build_test(
    name = "sample_delay_info_test",
    targets = [":sample_delay_info"],
)

ir_to_gates(
    name = "sample_gates_analysis",
    ir_src = ":sample_ir",
)

# As above but with fraiging disabled so it runs faster.
ir_to_gates(
    name = "sample_gates_analysis_nofraig",
    ir_src = ":sample_ir",
    fraig = False,
)

build_test(
    name = "sample_gates_analysis_test",
    targets = [":sample_gates_analysis"],
)

dslx_to_ir(
    name = "add_chain_ir",
    lib = ":sample",
    top = "add_chain",
)

ir_to_gates(
    name = "add_chain_gates_analysis",
    ir_src = ":add_chain_ir",
)

build_test(
    name = "add_chain_gates_analysis_test",
    targets = [":add_chain_gates_analysis"],
)

dslx_test(
    name = "sample_test",
    deps = [":sample"],
)

# -- one-stage pipeline w/valid signals

dslx_to_pipeline(
    name = "sample_main_sv",
    delay_model = "asap7",
    input_valid_signal = "input_valid",
    output_valid_signal = "output_valid",
    pipeline_stages = 1,
    reset = "rst",
    reset_data_path = True,
    top = "main",
    deps = [":sample"],
)

diff_test(
    name = "sample_main_sv_test",
    file1 = ":sample_main_sv",
    file2 = ":sample_main_sv.golden.sv",
)

# -- variant without data-path reset

dslx_to_pipeline(
    name = "sample_main_sv_no_data_reset",
    delay_model = "asap7",
    input_valid_signal = "input_valid",
    output_valid_signal = "output_valid",
    pipeline_stages = 1,
    reset = "rst",
    reset_data_path = False,
    top = "main",
    deps = [":sample"],
)

diff_test(
    name = "sample_main_sv_no_data_reset_test",
    file1 = ":sample_main_sv_no_data_reset",
    file2 = ":sample_main_sv_no_data_reset.golden.sv",
)

# -- no flops on input/output

dslx_to_pipeline(
    name = "sample_main_sv_noflops",
    delay_model = "asap7",
    flop_inputs = False,
    flop_outputs = False,
    module_name = "noflops",
    pipeline_stages = 1,
    top = "main",
    deps = [":sample"],
)

diff_test(
    name = "sample_main_sv_noflops_test",
    file1 = ":sample_main_sv_noflops",
    file2 = ":sample_main_sv_noflops.golden.sv",
)

# -- formatting test

dslx_fmt_test(
    name = "dslx_fmt_test",
    srcs = glob(["*.x"]),
)

# -- prove quickcheck test

dslx_prove_quickcheck_test(
    name = "sample_prove_quickcheck_test",
    lib = ":sample",
    top = "quickcheck_main",
)

# Pipeline stitching example

dslx_library(
    name = "pipeline_stages_lib",
    srcs = ["pipeline_stages.x"],
)

dslx_stitch_pipeline(
    name = "pipeline_stages_pipeline",
    lib = ":pipeline_stages_lib",
    top = "foo",
)

diff_test(
    name = "pipeline_stages_pipeline_test",
    file1 = ":pipeline_stages_pipeline",
    file2 = ":pipeline_stages_pipeline.golden.sv",
)
